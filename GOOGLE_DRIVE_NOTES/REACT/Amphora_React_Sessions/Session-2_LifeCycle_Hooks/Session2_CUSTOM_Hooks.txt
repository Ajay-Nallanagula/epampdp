Custom Hooks Examples:  https://www.reacthooklab.com/use-toggle

What is hooks Pattern?
The Hook pattern is the practice of extracting component logic into reusable functions. This ensures your components are clean and more straightforward to reason about. This pattern can be employed using Custom Hooks.

#region use Toggle Custom hook
import { useState, useCallback } from 'react'

function useToggle(initialState = false) {
  const [state, setState] = useState(initialState)

  const toggleHandler = useCallback(() => {
    setState((prevState) => !prevState)
  }, [])

  return [state, toggleHandler]
}

function MyComponent() {
  const [isOn, toggleIsOn] = useToggle(false)

  return (
    <div>
      <p>Is the light on? {isOn ? 'Yes' : 'No'}</p>
      <button onClick={toggleHandler}>Toggle</button>
    </div>
  )
}

#endregion use Toggle Custom hook

#region useAsync custom hook

import { useState, useEffect } from 'react'

function useAsync(asyncFunction) {
  const [data, setData] = useState(null)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState(null)

  useEffect(() => {
    async function fetchData() {
      setLoading(true)
      try {
        const response = await asyncFunction()
        setData(response)
      } catch (e) {
        setError(e)
      } finally {
        setLoading(false)
      }
    }

    fetchData()
  }, [asyncFunction])

  return { data, loading, error }
}


#endregion useAsync custom hook

#region Custom Hook useDebounce
Ref: https://betterprogramming.pub/react-custom-hooks-with-real-life-examples-c259139c3d71

Debouncing is a strategy used to improve the performance of a feature by controlling the time at which a function should be executed. 

--> You have SearchInput like below 
const SearchComponent = () => {
const [result,setResult] = useState([])
const [txt,setTxt] =  useState()
const debouncedValue = useDebounce(txt,100)

useEffect(() => {
const results = someAPiCall(debouncedValue) 
setText(result)
},[debouncedValue]) //if txt is given as dependency array 
//This API will be called for every key press which is not needed, hence we can debounce or introduce some delay


return(
<>
<input type="text" onChange={() => setText(txt)}/>
{JSON.stringify(result)}
</>
)
}


function useDebounce(value, delay) {
  // State and setters for debounced value
  const [debouncedValue, setDebouncedValue] = useState(value);
  useEffect(
    () => {
      // Update debounced value after delay
      const clearTimehandler = setTimeout(() => {
        setDebouncedValue(value);
      }, delay);
      // Cancel the timeout if value changes (also on delay change or unmount)
      // This is how we prevent debounced value from updating if value is changed ...
      // .. within the delay period. Timeout gets cleared and restarted.
      return () => {
        clearTimeout(clearTimehandler);
      };
    },
    [value, delay] // Only re-call effect if value or delay changes
  );
  return debouncedValue;
}

#endregion useDebounce

#region useThrottle
https://dev.to/jeetvora331/throttling-in-javascript-easiest-explanation-1081
Throttling is a technique that limits how often a function can be called in a given period of time. 
It is useful for improving the performance and responsiveness of web pages that have event listeners that trigger heavy or expensive operations, such as animations, scrolling, resizing, fetching data, etc.

For example, if you have a function that fetches some data from an API every time the user scrolls the page, you might want to throttle it so that it only makes one request every second, instead of making hundreds of requests as the user scrolls. This way, you can avoid overloading the server or the browser with unnecessary requests and reduce the bandwidth consumption.

SetTimeout Vs SetInterval Vs SetImmediate Vs process.nextTick
https://codeforgeek.com/node-js-timers-module/


#endregion useThrottle
