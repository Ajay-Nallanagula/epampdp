Methods of Primitives:
---------------------
JavaScript allows us to work with primitives (strings, numbers, etc.) as if they were objects.  They also provide methods to call as such.

A primitive

Is a value of a primitive type.
There are 7 primitive types: string, number, bigint, boolean, symbol, null and undefined.

An object

Is capable of storing multiple values as properties.
Can be created with {}, for instance: {name: "John", age: 30}. There are other kinds of objects in JavaScript: functions, for example, are objects.

Objects are “heavier” than primitives. They require additional resources to support the internal machinery.

For a primitive vlaue should be able to do what the objects do, so keeping that in mind "object wrapper" that provide extra functionality is created and then destroyed .

consider 
let str = "Hello";
alert( str.toUpperCase() ); // HELLO

step 1: a special object is created , which know the value of str
step 2: this special object has a method toUpperCase(), converts the str value to uppercase
step 3: the special object is destroyed, and value is emitted.

So primitives can provide methods, but they still remain lightweight.

same for even number
let n = 1.23456;
alert( n.toFixed(2) );

The disadvantage of using ctor way of creating primitives, they produce absurd result
consider following 
console.log(typeof(0)) //number
console.log(typeof(new Number(0)) //object
now
if(0) //results in falsy condition
if(new Number(0)) // results in truthy condition because its an object!!!

On the other hand, using the same functions String/Number/Boolean without new is a totally sane and useful thing. They convert a value to the corresponding type: to a string, a number, or a boolean (primitive).
For example, this is entirely valid:
let num = Number("123"); // convert a string to number


the null and undefined primitives are pure primitives, they don't have wrapper functions, they dont have methods 
alert(null.test); // error

Numbers:
-------
1. Regular numbers in JavaScript are stored in 64-bit format IEEE-754, also known as “double precision floating point numbers”
2.Range of number in JS 2^53 to 2^-53
3. If you need numbers exceeding the rangeof numbers we use BigInt

consider following
let billion = 1000000000;
shorthand notation for the same thing in javascript is
In JavaScript, we shorten a number by appending the letter "e" to the number and specifying the zeroes count:
let billion = 1e9; // O/P : 1000000000, 1 billion, literally: 1 and 9 //zeroes
alert( 7.3e9 );  // 7.3 billions (7,300,000,000)
"e" multiplies the number by 1 with the given zeroes count.
1e3 = 1 * 1000
1.23e6 = 1.23 * 1000000

in the case of 7.3e9
7.3 * 1* 1000000000 = 7,300,000,000

similarly consider 
let x = 7.3e-3  // e is followed by negative number we need to divide
this means 7.3/1*1000 = 0.0073

Hexadecimals are represented by 0x eg 0xFF or 0xff is 255
Octal numbers are represented using 0o
Binary numbers are represented using 0b
let a = 0b11111111; // binary form of 255
let b = 0o377; // octal form of 255
console.log(a==b) //true 

toString
--------
let num =10
const decimal  = num.toString() // by default its base 10
const hexa = num.toString(16) //Hexa decimal
const binary = num.toString(2) //binary

consider following statement
123456..toString(36) //this works in chrome console
Here we are using two dots, because we are calling toSTring() method directly on a number javascrip considers numbers will by default have a decimal 
so here one dot is for decimal, other is for method invocation 
instead we can use (123456).toString() //


If a number is too big, it would overflow the 64-bit storage, potentially giving an infinity:
alert( 1e500 ); // Infinity
alert( 0.1 + 0.2 == 0.3 ); // false
alert( 0.1 + 0.2 ); // 0.30000000000000004

Why does this Happen ?
magine you’re making an e-shopping site and the visitor puts $0.10 and $0.20 goods into their cart. The order total will be $0.30000000000000004. That would surprise anyone.

A number is stored in memory in its binary form, a sequence of bits – ones and zeroes. But fractions like 0.1, 0.2 that look simple in the decimal numeric system are actually unending fractions in their binary form.

In other words, what is 0.1? It is one divided by ten 1/10, one-tenth. In decimal numeral system such numbers are easily representable. Compare it to one-third: 1/3. It becomes an endless fraction 0.33333(3).

So, division by powers 10 is guaranteed to work well in the decimal system, but division by 3 is not. For the same reason, in the binary numeral system, the division by powers of 2 is guaranteed to work, but 1/10 becomes an endless binary fraction.

There’s just no way to store exactly 0.1 or exactly 0.2 using the binary system, just like there is no way to store one-third as a decimal fraction.
The numeric format IEEE-754 solves this by rounding to the nearest possible number. These rounding rules normally don’t allow us to see that “tiny precision loss”, but it exists.

Can we work around the problem? Sure, the most reliable method is to round the result with the help of a method toFixed(n):
let sum = 0.1 + 0.2;
alert( sum.toFixed(2) ); // 0.30
toFixed always return a string
we can use the unary plus to coerce it into a number:
let sum = 0.1 + 0.2;
alert( +sum.toFixed(2) ); // 0.3
