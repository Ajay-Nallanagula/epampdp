
Udemy: https://www.udemy.com/course/microfrontend-course/learn/lecture/24615508#overview

npm install webpack@5.68.0 webpack-cli@4.10.0 webpack-dev-server@4.7.4 faker@5.1.0 html-webpack-plugin@5.5.0

What are various ways of achieving Microfrontends ?
https://sharvishi9118.medium.com/cross-micro-frontend-communication-techniques-a10fedc11c59
https://medium.com/appfoster/a-comprehensive-guide-to-micro-frontend-architecture-cc0e31e0c053

Read this: https://stackoverflow.com/questions/62853824/how-to-share-redux-store-in-micro-frontend-architecture

What are your project bundle-sizes:
Main bundle 315kb gzipped with main functionality and dependencies, and then several 10-20kb chunks.
https://blog.jakoblind.no/3-ways-to-reduce-webpack-bundle-size/

In a Continuous Integration/Continuous Deployment (CI/CD) pipeline, test coverage is usually checked automatically after the code is pushed to the repository and before it is deployed to production.


#region Pre-requisites for Microfrontends

HTML, CSS, and JavaScript: As Microfrontends build on the core web development languages, having a solid understanding of HTML, CSS, and JavaScript is a fundamental prerequisite.

Understanding of SPA (Single Page Application): In addition to the basic web development languages, Microfrontends also require the understanding of how a single page application works.

Familiarity with JavaScript Frameworks: Familiarity with at least one JavaScript framework such as React, Angular, Vue.js can help as it is commonly used in Microfrontend architecture.

Back-End Programming: A strong understanding of back-end programming is beneficial because it helps to understand the big picture of web development.

Web Components: Knowledge of web components which are a set of web platform APIs that allow you to create new custom, reusable, encapsulated HTML tags to use in web pages and web apps.

Understanding of Microservices: Having a basic understanding of the microservices architectural style can provide a good foundation for learning Microfrontends.

Basic Knowledge of Containers: Container technologies, such as Docker, help developers package up an application with all of the parts it needs, such as libraries and other dependencies, and ship it all out as one package.

Familiarity with CI/CD: Continuous Integration/Continuous Deployment is pivotal in the application's development life cycle, having knowledge about it helps a lot.

Basic knowledge of Server-side rendering (SSR) and Client-side rendering (CSR): The understanding of how SSR and CSR works is beneficial in leveraging the advantages of Microfrontends to its fullest.

Familiarity with Version control systems: Such as GIT or SVN.

Rem

#endregion Pre-requisites for Microfrontends

#region MISC/Questions

How does Module Federation handle CORS, multiple different ports how is it handling?
How do you call different endpoints in Microfrontends , Module federation
Communication between various microfrontends ?

What is Piral ?
Piral is a library to build Microfrontends easily.
https://docs.piral.io/guidelines/tutorials/02-getting-started

#endregion MISC/Questions

Project Info
============
1) There are three diffent apps cart,product, container
2) Each of them can be run in isolation // i.e can be run locally 
3) Container can be run, and execute both cart and product

#region Basics of Microfrontend

#region What is a MICROFRONTEND?

1) A microfrontend is an architectural style where a front-end app is decomposed into "microapps", working loosely together. 
2) Each microapp is developed, tested and deployed independently, by separate teams with their own lifecycle, allowing for simpler, more localized and effective project management.

Advantages of microfrontends:
=============================
- **Independence**: Each microfrontend can be independently developed, tested and deployed by separate teams.
- **Simplicity**: Small, dedicated codebases are usually easier to maintain.
- **Parallelism**: Multiple teams can work on different features at the same time.
- **Scalability**: Teams and features can scale horizontally.
- **Diversity**:  Each microfrontend can be written using the technologies best suited for its feature set.
- **Resilience**: A problem in one microfrontend does not affect the others.

Disadvantages of Microfrontend:
===============================
- **Complexity**: Intercommunication and integration among microfrontends can be complex.
- **Inconsistency**: Different teams using different technologies can lead to an inconsistent user interface.
- **Redundancy**: Certain areas, like common utilities or components, can be duplicated across teams, leading to code redundancy.
- **Performance issues**: Microfrontends have additional overhead compared to traditional monolithic frontends, such as run-time integration and additional HTTP requests.

An example of microfrontend architecture would be an e-commerce site:
- One microfrontend represents the product listing.
- Another microfrontend represents product details.
- Another one represents the shopping cart.
Each of these would be a separate application, developed by a separate team, possibly using different web technologies, but they all work together to create a seamless user interface.


#region Microfrontened vs Monolith Vs Monorepo Vs Modular Monolith
https://levelup.gitconnected.com/microfrontends-vs-monolithic-frontend-which-is-right-for-your-project-2980c6939a36

--> Monolithic Frontend is a frontend architecture in which all the UI components and features of an application are handled by a single, large codebase. In this architecture, the frontend is tightly coupled with the backend and cannot be easily separated. 
This means that the entire application runs on a single server and any updates or changes to the frontend require redeploying the entire application.

--> Monolith is know for simplicity, low cost maintenance and ease of development 
However Monlith is difficult to scale and one part of the codebase can have unintended consequences in other parts .

--> Monolithic Frontends are suitable for small projects or projects that require a simple UI, where the simplicity and ease of development outweigh the disadvantages of the architecture.

--> Microfrontends, can be developed and deployed independently, allowing for greater flexibility, scalability, and maintainability of the overall frontend application

--> Microfrontends can be developed using different programming languages, frameworks, and technologies, as long as they can communicate with each other through well-defined APIs. 
--> Microfrontends also provide greater fault isolation, as any issues or failures in one microfrontend can be contained and resolved without affecting the rest of the application. This can result in improved resilience and availability of the overall application.


#endregion Microfrontened vs Monolith Vs Monorepo

#endregion What is a microfrontend.

#region Integration/Orchestration/Assemble Together.
https://tkssharma.com/building-micro-frontend-build-time-and-compile-time/

#region Build time integration: 
Scenario: Before container is loaded it get access to product-list microapp. 
One way of achieve that by Publish each micro frontend as a npm package and have the container application include those npm packages as library dependencies.
Like we are loading loadash, ramadaJs, momentJs etc 

Advantages:
----------
Apps are independent
Since all the apps are divided and developed separately these are independent of each other
Apps are easier to understand, develop and deploy.

Disadvantages:
--------------
Huge App and Bundle at build time. 
Since all the apps are added as the size of the package grows and it becomes a bigger bundle in size
Apps are tightly coupled and lots of documentationApps are coupled with versions and you have to use the proper version of the package of the dependent module
Now apps are coupled and we are using different versions of external packages so we have to maintain the discipline to use provided packages, breaking change in the package can become a problem for the whole app

#endregion Build Time Integration 
		
#region Run time integration
Scenario : "After the container is loaded" it gets access to product-list. 
One of the simplest approaches to composing applications together in the browser is the humble iframe.
Doing it using iframe is just an old way of doing it, now we have different tools which can manage that example like webpack, webpack 5 provided module federation
 
In simple terms using runtime composition we just render other site components into a container or shell/main application, it is all runtime means at runtime we will download the bundle and render its component on UI.

app1.js and app2.js will be loaded at runtime from a different site from the same domain (sub-domains) and the host application will manage to render the required components from it.

We can achieve this using Module Federation or Next.Js
 
 Advantages:
 1) Development is faster: The whole development becomes faster and easier because of separate teams and we are getting all package sin hand from different modules.
 2) CI/CD process is easy : Each app/package can be integrated and deployed separately and this makes the CI/CD process a lot easier. When we fix the app or introduce a new feature we don’t have to worry about the entire application since all the features are independent.
 3)Independent Stacks and versions :We can choose our own stack for each app but this doesn’t happen so often But, we can have different versions of the same stack. For example, Some teams have the flexibility and time to introduce and test newer versions of the same stack.
 4) No Shared Code : In large applications, we tend to share code across features but, this doesn’t scale well and introduces a lot of bugs and interdependency as the app grows bigger and bigger. This doesn’t apply to the Micro-frontends as we do not share the code unless it is a dumb component.
 
 Disadvantages:
 =============
 No Shared Code: In large applications, we tend to share code across features but, this doesn’t scale well and introduces a lot of bugs and interdependency as the app grows bigger and bigger. This doesn’t apply to the Micro-frontends as we do not share the code unless it is a dumb component.
  Runtime failures: There may be runtime failure as we don’t know how other services are doing.
  
 
 #endregion Run time integration
 
#region Server Integration 
--> Server Integration (SSR): while sending JS for container, server decides wether to send product list or not. This Server-Side-Rendering 
Or using Next.Js 

#endregion Server Integration

**Main -focus here is on Run Time Integration.**



#endregion Integration/Orchestration/Assemble Together.

--Product
npm install webpack@5.88.0 webpack-cli@4.10.0 webpack-dev-server@4.7.4 faker@5.1.0 html-webpack-plugin@5.5.0

--Container
npm install webpack@5.68.0 webpack-cli@4.10.0 webpack-dev-server@4.7.4 html-webpack-plugin@5.5.0 nodemon

#endregion Basics of Microfrontend

#region Basics of Module federation webpack

https://webpack.js.org/concepts/module-federation/

Steps to configure Module Federation
=====================================
Step 1: designate one application as a host(container or shell) and one as a remote(products).
	Assume you have a ecommApp where in you have different modules like cart, productlist, billing etc.
	Host application is "container".
	remoteapps are cart, productlist etc.
Step 2:  In remote decide which modules(files) you want to make available to other projects eg: product/index.js
Step 3:  Set up webpack Module Federation plugin to expose those files
	//inside billing webpack.config.js , similar to other modules 
	const HtmlWebpackPlugin = require("html-webpack-plugin");
    const { ModuleFederationPlugin } = require('webpack').container
	module.exports = {
    mode: 'development',
    devServer: { port: 8083 },
    plugins: [
        new ModuleFederationPlugin({
            name: 'billing', //STEP-3_MANDATORY**
            filename: 'remoteEntry.js', //name is remoteEntry by convention 
            exposes: {
                './BillingIndex': './src/bootstrap.js' // bootstrap.js or index.js where root is constructed
            }
        }),
        new HtmlWebpackPlugin({ template: './public/index.html'})
    ]
}
//Inside index.js/bootstrap.js 
import faker from 'faker'
export function mount(selector) {
    let products = ''
    for (let index = 0; index < 3; index++) {
        const name = faker.commerce.productName()
        products += `<div><b>${name}</b></div>`
    }
    selector.innerHTML = products //this selector will come from container/host app
}

//Inside index.js
import('./bootstrap');

Step 4: In HOST, decide which file you want to get from remote, and set up module federation plugin to fetch those files
i.e in container which file should we get, in this example its bootstrap.js 

//Inside container, webpack.config.js
const HtmlWebpackPlugin = require("html-webpack-plugin");
const { ModuleFederationPlugin } = require("webpack").container;
module.exports = {
    mode: 'development',
    devServer: {port: 8080},
    plugins: [
        new ModuleFederationPlugin({
            name: 'container', //For container 'name' is not mandatory
            remotes: {
                //products: 'products@http://localhost:8081/remoteEntry.js',
                //cart: 'cart@http://localhost:8082/remoteEntry.js', //url.starts('cart') the name cart should exactly match with cartApp-->webpack.config--> //modulefederation-->'name' property, see example here : STEP-3_MANDATORY**
                billing: 'billing@http://localhost:8083/remoteEntry.js' //This is the way we refere remotes in host application
            }
        }),
        new HtmlWebpackPlugin({
            template: './public/index.html'
        })
    ]
}

STEP6: In HOST refactor the entry point to load asynchronously. In the host, import whatever files you need from remote.
//Inside index.js/bootstrap.js ,index.html of container application:
import { mount as billingMount } from 'billing/BillingIndex';
billingMount(document.querySelector('#dev-billing'))
//Index.html
<div id='dev-billing'><div>

Why is STEP-3_MANDATORY** name important?
The host application will recognise the cart with the name mentioned here , If you see the network tab the remoteEntry.js w.r.t billing/car/productlist the entire index/bootstrap.js of the cart application is save like below
//Inside remoteEntry.js 
var cart;
/******/
(()=>{
    // webpackBootstrap
    /******/
    var __webpack_modules__ = ({

        /***/
        "./node_modules/ansi-html-community/index.js": /*!***************************************************!*\
  !*** ./node_modules/ansi-html-commun...
  ......othe related code.........................................

Hence that name is important.

****GOTCHA:
we cannot give a div with id ' cart' or 'billing'  inside container-app , that you gave as name in module-federation of respective apps .
module-federation will over-ride STEP-3_MANDATORY** thingy with tht of html-document id.



#endregion 

#region Shared Modules:
=======================
Webpack--> ModuleFederation-->plugins-->ModuleFederation --> shared:['faker'] //this can also be an object.

NOTE: shared can be used only with modules of same version, if there are different versions of the module its understood and correct way to load two seperate modules , example faker@4.00, faker@5.0.0. two versions are to be loaded .. by default that is the behaviour of moduleFederation which is dexirable and expected.
NOTE: The shared modules take into consideration all the major.min.patch versions ^,~ symbols etc. 

When you mark some module as shared , it means that module will be loaded asynchronously.
When you see independent projects product/cart index.html respectively faker is used immediately, but faker is loaded asynchronously because of 'shared' hence we see below error:
Error message when you run independent projects
Shared module is not available for eager consumption: webpack/sharing/consume/default/faker/faker

Solution to avoid this , we can load xthe index.html asynchronously , such that webpack gets time in the browser to load faker asynchronously.
//index.html
import('./bootstrap.js') //do this for both product and carts.

Usecase: a library with multiple copies issue
=============================================
Faker library can be loaded multiple times in the browser, the faker can have multiple copies in the browser that doesn't harm, throw error etc
But consider React like library, we we are loading multiple copies, react complains(warns/errors) saying you are running multiple copies in your browser.
In this case the soultion can be shared modules can alo be loaded as "SINGLETONS", only one copy of the object will be available at any time.
NOTE: In Singleton cases the major.minor.patch versionion DOES NOT APPLY, irrespective of different versions only one instance will be loaded by webpack.
In this case you will get a conflicting warning message, the common modules must be in sync.

Eg: Webpack--> ModuleFederation-->plugins--> ModuleFederation -->  shared:{ faker: { singleton: true }}
Findout where exactly in host or in microapp?


Incompatible Versions + Singleton rule:  Webpack will follow singleton rule, and load only one copy, but with a warning message in console with incompatible versions.

#endregion Shared Modules

#region Execution Context (sub-app Execution context)

Problem:
//products --> index.js
document.querySelector("#products-dev").innerHTML = products 

In the above line there is a n assumption we are taking that there is some container with id : products-dev
This is not correct way .
Always remember , all three apps are worked upon by different teams , cart, products, container.
***Only in local index.html of cart and product work. In production only container.index.html works 

This will lead us to two scenarions :
Scenario1: In local where we have index.html root div with products-dev in both cart and product may or may not exist
Scenario 2: In remote we may or  may not have the root div with products-dev in container app

In such cases we make pass the root:ids as part of a function --> mount(el)

Hence we need to refactor our code .
NOTE: The same thing holds good in cart as well

//Refactored code 
function mount(el) {
    let products = ''
    for (let index = 0; index < 6; index++) {
        const name = faker.commerce.productName()
        products += `<div>${name}</div>`
    }
    console.log(products)
    // document.querySelector("#products-dev").innerHTML = products
    el.innerHTML = products // something like ReactDOM.render(<App/>)
}

//Scenario 1 : This will run in local, when producst is run in isolation
//This will be set by webpack, mode property 
if (process.env.NODE_ENV === 'development') {
    const el = document.querySelector("#products-dev")
    if (el) {
        mount(el)
    }
}

//Scenario2: May not be exceuted, immediately/locally. Needs not render immediately, container will render
export { mount }

#endregion Execution Context (sub-app Execution context)

#region Linking Multiple Apps Together

Why should we export mount?

Scenario: Container App is in React, Marketing App is in React .
================================================================
--> We should not make an assumption and render MarketingApp as an React Component inside Container.
--> This might Change hence , the container logic to render the micro-apps should be generic , for example if we are writing Container in react we can do this way 
//Inside ContainerForlder, create a file.js
import marketingMount from 'marketing/MarketingApp'

//If you look at this code its most generic it will work if marketing microapp is build in React or Angular Or Vue or Flubber any thing 
const mount = () =>{
  const ref = useRef(null)
	useEffect(() => {
	     maketingMOUNT(ref.current) //mount take an element 
	})
  return <div ref={ref}><div>
}


We can also "require"  package.json file like 
//Inside webpack.common.js
const packageJson = require('../package.json')

//Inside moduleFederation 
plugins:[
new moduleFederation({
	shared:[...packageJson.dependencies] //This is a shortcut way to share the dependencies 
})
]



#endregion Linking Multiple Apps Together

#region Deployment
--> Want to deploy microfrontend independently(including container)

--> Location of child app remoteEntry.js files must be know at build time , consider container app ,
		a) index.js+bootstarp.js+ dependencies ->WEBPACK -> main.js
		This main.js should know the location of remoteEntry.js files at build-time, there is no magic way to know the locations of these remotes at runtime.
		
--> Many front-end deployment solutions assume you are deploying a monolith application , we need something that can handle multiple different ones.


--> Probably need CI/CD pipeline of some sort
--> At present, the remoteEntry.js file name is fixed!Need to think about caching issues.

Step 1: index.js+bootstarp.js+ dependencies ->WEBPACK -> main.js
Step2: Git Monorepo Or Git independent repos 
	container, marketing, dashboard, auth
	
Step 3:
container--> did container change?--> Build Prod version of container with webpack--> Upload to AWS S3 <--> AWS CDN[CloudFront] --> Browser/Client.
marketing--> did marketing change?--> Build Prod version of marketing with webpack--> Upload to AWS S3 <--> AWS CDN--> Browser/Client.
dashboard--> did dashboard change?--> Build Prod version of dashboard with webpack--> Upload to AWS S3 <--> AWS CDN--> Browser/Client.
auth--> did auth change?--> Build Prod version of auth with webpack--> Upload to AWS S3 <--> AWS CDN--> Browser/Client.



#endregion Deployment

#region CSS in Microfrontends

There are challenges with CSS in microfrontends

Scenario : assume we have two microapps --> Pricing and auth
Pricing: /pricing --> have no css <h1>Pricing</h1> displayed in black 
Auth: /auth --> have css h1{color:red} <h1>SignIn</h1> displayed in green color 

Now when we go to SignIn page from pricing, "SignIn" appears green, and when we navigate back to Pricing even "Pricing" appears green which is not intended .
That is because css remains in the browser and its applied to the microapps.

Solution: Css Scoping : 
//For custom/user-defined css
option 1: CSS-In-JS //this is granular level
option 2: style scoping in Vue/Angular 
option 3: Namespace your css
<div class="pricing"> All pricing related content </div>
Now in css you can namespace by .pricing div{...}, .pricing ul{...}, .pricing h1{...} etc etc

//For third-party CSS
-> Use components with css-in-js like material-ui, bootstrap
-> Manually build css library and Namespace scoping can be used, which is quite tedious

Challenge 2: There could be naming collsions in production version of the project, webpack minimizes the css and renames the classes 
Due to which the css can get distorted
Fix for name-collosions: We can give instructions to generate unique class names for.eg in materialUI we can give 
const generateClassName = createGenerateClassname({productionPrefix:'ma')}
>StyleProvider>

Step3: <StyleProvider generateClassName={generateClassName}/> // StyleProvider is a materialUI Import 


#endregion CSS in Microfrontends

#region Routing in Microfrontends in Remotes 

https://youtu.be/uRKUxZQ74os?feature=shared
Routing between microapps.

In Microfrontend architecture, routing between remote microapps is typically accomplished using an Application Shell or Micro Frontend Container that orchestrates the loading, routing, and unloading of the different microapps.

Here is a possible approach:
============================
Define routes and associate them with the respective microapp. When a user navigates to a route the associated microapp will get loaded.
Create placeholders for microapps in the Application Shell. Each placeholder is associated with a unique route.
Use the History API or a library like Reach Router or React-Router (in case of a React-based application) to enable navigation in the app.
On route change, the Application Shell determines which microapp to load based on the new route. It then performs any necessary clean up (like unloading any currently running microapp), and subsequently load the new microapp into the associated placeholder.
The Application Shell creates a mechanism for maintaining, loading, and unloading the microapp assets like JS and CSS files.
Communication between microapps can be done using custom events.
Remember, this approach requires a robust error handling mechanism to ensure that when one microapp fails, it doesn’t bring down the entire frontend.
Also, consider using lazy loading to only load a microapp when its route is accessed, improving the performance and loading time of your application.
In case of using frameworks like Angular or React, some libraries are specifically designed to handle microfrontend perspectives. For Angular, there is a library called single-spa-angular and for React, there is single-spa-react(https://single-spa.js.org/docs/getting-started-overview).

#region Example in Core JS for Easy Understanding
Let's assume we have an e-commerce platform, which is broken down into three micro frontends (or micro apps): Home, Products, and Checkout.
Our Micro Frontend Container (Application Shell) is the main entry point of our application. When it starts, it registers these three apps with their corresponding routes:
let routes = {
  '/': 'home',
  '/products': 'products',
  '/checkout': 'checkout'
}

This Application Shell contains placeholders where each micro app runs:
<div id="home-container"></div>
<div id="products-container"></div>
<div id="checkout-container"></div>

When any route change is detected, say by clicking a link, the router's role within the Application Shell decides which micro app to load:
function onRouteChange(newRoute) {
  let currentApp = routes[newRoute]; // Get the micro app to be loaded, requested

  // Unload the current app, make the innerHtML of corresponding div for microapp as blank
  unloadCurrentApp();

  // Load the micro app into its placeholder
  let container = document.getElementById(`${currentApp}-container`);
  loadApp(currentApp, container);
}

The loadApp() function could be responsible for fetching the JavaScript and CSS assets of a micro app, and inserting them into the page. It may also be used to pass any necessary props into the app, which would be particularly useful if these micro apps are built as custom web components.

function loadApp(appName, container) {
  // dynamic import for JS file of micro app.
  import(`./${appName}/index.js`).then(microApp => {
    // loading the JS file of micro app.
    microApp.load(container);
    // Props could be passed to the micro app here if needed.
  }).catch(error => {
    // Error handling while loading JS file of the micro app.
    console.log(`Failed to load micro app ${appName}: ${error}`);
  });
}
NOTE: Libraries like single-spa can also simplify some of this work.
https://single-spa.js.org/docs/getting-started-overview



#endregion Example in Core JS

#region Example in React
In a React application, a way to implement routing in a micro frontend architecture could be using react-router and module federation from webpack 5.
Let's simplify the case to two micro frontends - App1 and App2. We will use Module Federation to expose and use App1’s components inside of App2.
First we expose a component from App1 using Module Federation Plugin in your webpack config:
//Inside webpac.js 
new ModuleFederationPlugin({
  name: 'app1',
  filename: 'remoteEntry.js',
  exposes: {
    './Button': './src/Button',
  },
  shared: require("./package.json").dependencies
}),

In App2, we can now use the exposed component from App1 directly:
=================================================================
const Button = React.lazy(() => import('app1/Button'));
function App() {
  return (
    <Router> //BrowserRouter
      <Suspense fallback="Loading...">
        <Switch>
          <Route exact path="/">
            <div>Home Page</div>
            <Button /> {/* This is the button component from App1 */}
          </Route>
          <Route exact path="/page2">
            <div>Page 2</div>
          </Route>
        </Switch>
      </Suspense>
    </Router>
  );
}

In such a way we can build an entire micro frontend architecture. Each micro frontend is basically a standalone React app that will expose some or all components. It preserves the autonomy, as each app can live its lifecycle independently, but they can interoperate as part of one coherent user interface.

#endregion Example in React

#region ****Microfrontend Routing using Single-Spa package
https://single-spa.js.org/docs/getting-started-overview
https://mrbytebuster.medium.com/single-spa-with-react-85491b437759

Youtube Search: React microfrontend using single-spa package

For usage of Single-spa, should microapps be single-page microapps?
Answer NO, microapps can have their own routing mechanism .

The libraries called by single-spa are referred to as "micro-frontends," "services," or "applications" interchangeably. While the library is called single-spa (Single Page Application), it does not mean that your microapps, or micro-frontends, need to be Single Page Applications in the traditional sense.

What single-spa does is enable you to split your single page application into multiple smaller applications, each independently deployable and maintainable, and it stitches them together to create what appears to be one large single page application.

Each microapp with single-spa can control its own routing (with libraries such as react-router-dom in the case of React), or you can control routing at the single-spa level.

So, to answer your question more directly: using single-spa doesn't mean that each individual microapp has to be a complete Single Page Application on its own, but you certainly could structure your microapps that way if you wanted to. The key benefit of single-spa is the ability to independently develop, deploy, and maintain parts of a larger, composite SPA.

#endregion Microfrontend Routing using single-spa package

#endregion Routing in Microfrontends in Remotes

#region Microfrontends sharing State
https://youtu.be/yo4tcD6YJfk?feature=shared
Communication between microapps

Event Driven Approach: This method encourages communication via events. One microapp can trigger an event and others can listen and respond to it.
// create a custom event
let customEvent = new CustomEvent("CUSTOM_EVENT", {
  detail: { // data to be passed with the event
    message: "This is a custom event",
    time: new Date(),
  },
  bubbles: false,
  cancelable: true
});

// dispatch the event
window.dispatchEvent(customEvent);

//Inside other microApp
// event listener function
function handleCustomEvent(e) {
  console.log(e.detail.message);
  console.log(e.detail.time);
}

// attach the listener to the window object
window.addEventListener("CUSTOM_EVENT", handleCustomEvent);

// cleanup: remove the listener when it's not needed anymore
window.removeEventListener("CUSTOM_EVENT", handleCustomEvent);


Shared State Management: A common shared state can be used to allow communication between microapps. This can be achieved using libraries like Redux or MobX.

Web Components: One popular approach to building microfrontends is to use web components. This means that different fragments of the user interface are built and deployed separately, but they can still communicate via attributes and events.

Using APIs: Microapps can also communicate through backend APIs. In this case, microapps interact with each other by calling the other's exposed APIs.

Shared Libraries: Some shared functions or utilities can be created as libraries and different microapps can use these libraries to communicate with each other.

Iframe Communication: If different microfrontends are embedded via iframes, the HTML5 postMessage API can be used for communication.

Server Side Communication: Server side includes (SSIs) or Edge side includes (ESIs) are techniques that can be used to assemble different microfrontends on server-side.

Using a Publish/Subscribe Model: Microapps can publish certain updates, and others can subscribe to these updates to facilitate communication.
EventEmitter3 is a high performance EventEmitter. It has been micro-optimized for various of code paths making this, one of, if not the fastest EventEmitter available for Node.js and browsers. It's a great package for managing event driven communications between apps

Example for Pub/sub
//Inside Microapp1
const EventEmitter = require('eventemitter3'); 
var emitter = new EventEmitter();

// To emit event
emitter.emit('event1', "This is a test event");

// This would be in microapp2
emitter.on('event1', function(str) { console.log("A new event occurred: ", str); });

//Inside microapp2
const EventEmitter = require('eventemitter3'); 
var emitter = new EventEmitter();

// To listen to the event in Microapp1
emitter.on('event1', function(str) { console.log("A new event occurred: ", str); });

Middleware: Middleware such as a backend-for-frontend (BFF) can be set up to handle communication between the microfrontends, and act as a proxy for their respective backends.

Context Passing: For SSR (Server Side Rendering) microfrontends, a context prop can be used to pass server-side context to the microfrontend components.

Remember, the amount of communication between microfrontends should be kept minimal to maintain good decoupling of applications.


#endregion Microfrontends sharing State

#region Books 

Books :
    Building Micro Frontends with React 18
	Building Micro-frontends by Luca Mezzalira
	Journey to Micro Frontends by Brendon Co
	Practical Module Federation by Zack Jackson & Jack Herrington

#endregion Books

#region Sample Webpack.config for microfrontend
const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const { webpack } = require('webpack');
const { ModuleFederationPlugin } = require('webpack').container;

module.exports = async (_, { mode = 'development' }) => {
  return {
    entry: path.join(__dirname, 'src', 'index.jsx'),
    target: 'web',
    mode,
    output: {
      path: path.join(__dirname, 'build'),
      publicPath: 'auto',
      chunkFilename: 'js/[id].[contenthash].js',
      filename: 'js/[name].[contenthash].js',
      clean: true,
    },
    devServer: {
      hot: true,
      open: true,
      historyApiFallback: true,
      static: {
        directory: path.join(__dirname, 'src', 'public'),
      },
      compress: true,
      port: 8000,
    },
    resolve: {
      modules: [
        path.join(__dirname, 'src'), 'node_modules'
      ],
      extensions: ['.css', '.js', '.jsx', '.scss'],
    },
    module: {
      rules: [
        {
          test: /\.(js|jsx)$/,
          exclude: /node_modules/,
          use: {
            loader: 'babel-loader',
            options: {
              presets: ['@babel/preset-env', '@babel/preset-react'],
            },
          },
        },
        {
          test: /\.css$/,
          include: path.resolve(__dirname, 'src'),
          use: ['style-loader', 'css-loader'],
        },
      ],
    },
    plugins: [
      new HtmlWebpackPlugin({
        template: path.join(__dirname, 'src', 'public', 'index.html'),
      }),

      new ModuleFederationPlugin({
        name: 'HostApp',
        filename: 'js/host-app-entry.js',
        shared: [
          {
            react: {
              requiredVersion: '^18.2.0',
              singleton: true,
              eager: true,
            },
            'react-dom': {
              requiredVersion: '^18.2.0',
              singleton: true,
              eager: true,
            },
            'react-router-dom': {
              requiredVersion: '^6.3.0',
              singleton: true,
              eager: true,
            },
          } 
        ],
        remotes: {
          'remote': 'RemoteApp@http://localhost:9000/js/remote-app-entry.js'
        }
      })
    ],
  };
};

#endregion Sample Webpack.config for Microfrontend