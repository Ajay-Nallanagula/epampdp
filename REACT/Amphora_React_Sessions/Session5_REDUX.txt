Fake API:
https://dummyjson.com/docs/products
https://jsonplaceholder.typicode.com/

Reference: https://www.youtube.com/watch?v=poQXNp9ItL4

Redux is state management library for JS apps.
Js apps can be in React,Angular,Vue anything.
Data changes, keep UI in diff components in sync.
Redux fix this problem by centralizing data in store.
Where store is JS object. The single source of truth.

Redux:
1) Centralizes applications's state, 
2) Makes data flow transparent and predictable
3) We can track why/where/what/when/how of data changes.
4) All the different components pulls the data from store and display
5) Cachebility
6) Easy debugging


Redux dev tools chrome extension.
Time Travel debugging.
Log Rocket redux dev tools in production.

Redux allows to cache the page.
Redux is based on functional programming.

Functional Programming:
Essential concepts :-
JS is multi-paradigm programming language , oops.functional programming
Higher order functions
Function composition //Use lodash to get rid of paranthesis issue compose/pipe
Currying
Pure functions
Immutability

NOTE: spread operator of JS is only shallow copy, nested objects are shared.

These are used for immutability Apart from sprad operator.
Immer.js/ Immutable.js

#region Investigate Questions On:

1) Redux 5 normal middleware like logger.
2) Caching/Reselect in Redux
3) Redux-NextJs 
4) RTK Query: https://medium.com/@r.sipchenko/rtk-query-for-beginners-a82ab7188324

#endregion Investigate Questions On


#region Mosh tutorials

#region Flux Architecture
Principles of Flux: https://www.dhiwise.com/post/how-to-manage-complex-javascript-data-flows-with-flux-in-react
At the heart of Flux architecture lie three fundamental principles that distinguish it from traditional data flow patterns:
1. Unidirectional Data Flow: Unlike bidirectional data binding, Flux enforces a unidirectional flow of data. Actions trigger updates, which then propagate through the system, ensuring a clear and predictable path for data changes.

2. Single Source of Truth: The application state is managed by stores, ensuring a single source of truth. This simplifies debugging and makes it easier to reason about the application's state at any given point.

3. State Mutation via Actions: Changes to the application state occur only through actions. These actions, in turn, are dispatched by components, creating a controlled and traceable mechanism for state updates.

Key Components of Flux
Flux architecture comprises four key components:

1. Actions: Represent user interactions or events that trigger state changes.

2. Dispatcher: Central hub that manages the flow of data and ensures that stores are updated in a consistent order.

3. Stores: Contain the application state and the logic to respond to actions. Multiple stores can exist in an application, each responsible for a specific domain of the state.

4. Views (React Components): Subscribe to changes in the stores and update accordingly. They also dispatch actions in response to user interactions.

Flux Vs Redux:
=============
1. ***Data Flow: Flux employs a unidirectional data flow, where data flows from actions to stores to views, making it easier to track and reason about changes. Redux also uses unidirectional data flow, but its actions are dispatched to a central store, whereas Flux broadcasts actions to multiple stores. MobX, on the other hand, utilizes a reactive data flow, where state changes automatically trigger updates in the dependent components.


#endregion Flux Architecture 

Redux is build on top of funtional programming. We cannot mutate the object.

all redux related packages:
npm install redux react-redux @reduxjs/toolkit  @redux-devtools/extension --save

Install Redux: and redux toolkit redux-devtools
https://redux.js.org/introduction/installation

npm install redux react-redux @reduxjs/toolkit @redux-devtools/extension --save 
HOOKS in REDUX: https://www.almabetter.com/bytes/tutorials/reactjs/hooks-in-redux

For Typescript :
npm install redux react-redux @reduxjs/toolkit @redux-devtools/extension --save
npm install @types/redux @types/redux-devtools-extension --save-dev

Organize Redux Code
====================
--> redux holds state, state should be isolated from the rest of the UI-code .
--> you can configure under store/... folder structure or any other name
--> inside that configure based on the feature that you are doing 
	like store/auth/, store/orders/, store/products/, store/billing/ etc 
	 inside each feature folder you can have actions.js, actionTypes.js, reducer.js ...
--> For every change , we will have to touch three files , to reduce that complexity we can follow "DUX PATTERN"
 where all actions,actionTypes,reducer stay in one file like store/auth.js, store/products.js, store/billing.js 
 --> Finally one store/index.js file where we 
		--> combine reducers
		--> confingure/createStore , with preloaded state 

NOTE: redux-dev-tools is different from @redux/toolkit
@redux/toolkit provides bunch of utility functions 
--> configureStore(), createAction() createReducer()/* used for actionCreators*/
--> Will allow you to dispatch async actions like api calls, if toolkit wasn't there we will have to make use of middlewares to achieve the same .


The building blocks of redux are
=================================
Summary
=======
With the three step recipe, Redux allows us to easily manage advanced React applications:

The Store represents the state of our Redux application as one giant object.
Reducers describe ways in which we can update the store.
Actions activate reducers to eventually update the store
Altogether, Redux boils down to these three simple items: the store, reducers, and actions. As a team, they provide a simple yet highly powerful method to handle data in our apps.


1) Store: The Store represents the state of our Redux application as one giant object.This store is accessible from any part of the application.
2) Action(like events) : Will tell what happened, user performs action.
3) Reducer(like event handlers) : Pure functions, which  take state and action and return new state(coffee machine)
 Pure functions:
 1) No mutations
 2) No side effects
 3) No usage of global state 
 4) Always return the same output, given the input 

How does these building blocks work ?
--------------------------------------
scenario : Lets say we are adding an item to shopping cart
1) An "Action" is created with object schema as , for an action "type" property is mandatory else redux will throw an error
{
 type:"ITEM_ADDED", //This is mandatory
  payload:{ //this can be anything 
  itemDescription:{
   itemId:'bla ba'
   itemName:'blah blah'
  }
 }
}

2)Action will in turn trigger dispatch, which is provided by the Store, this dispatch takes an action as an argument,
3) This action via dispatch is forwarded to reducer. The store calls the reducer. The reducer inturn computes the new state and returns/updates the store, then store will update the state internally and  notify the UI component, then UI component will update their data and refresh themselves.
4) We don't call reducer directly.

Why is redux designed this way?
================================
In this style of architecture we are sending all the actions through one single entrance (pipe like structure), we have central location where the actions apply, this is helpful in logging redo/undo etc

Lets follow with an example
We are Trying to build bug tracking system 
Actions that can be done 
1) We can add a bug
2) We can delete a bug
3) We can resolve a bug, changing boolean property to true 

To build redux we need to follow 4 steps 
1) Design the store
2) define  the actions
3) create the reducers
4) set up the store


Redux is not included in react, we need to seperately install redux library "npm i redux"
here the latest version is  4.0.5



Design the store
----------------
structure of store, simple array with bug objects, the state can be anything, can also be an object, in case is state is objects we may create reducer for each property 
[
    {
    id:'',
    desc:'',
    resolved:''
    },
    {
    id:'',
    desc:'',
    resolved:''
    }
]

Define actions
--------------
1) We can add a bug
2) We can delete a bug
3) We can resolve a bug, changing boolean property to true 

actions are plain js objects, but redux expects one of the property be 
"type" , type can be any of the serializable type, i.e we can store on the disk. functions are not serializable.
we can use strings, numbers, but numbers are not descriptive.
{type:'bugAdded',description:''}

Redux is inspired by flux, In flux the action object is slightly different
{
 type:"ITEM_ADDED", 
  payload:{  //This is from flux
  itemDescription:{
   itemId:'bla ba'
   itemName:'blah blah'
  }
 }
}

But redux doesnt restrict to use of flux, but using this makes your consistent
payload contains minimum info of the action.

Sample action example
======================
//The following action adds a superPower to the dashboard, from list of defaultSuperPowers given
//This is using without @redux/toolkit
export const addSuperPower = (id, name) => {
    return {
        type: SUPERPOWER_ADDED,
        payload: {
            id,
            name
        }
    }
}
//usage
dispatch(addSuperPower({id:p.id,name:p.name})

Create Action using @redux/Toolkit-->createAction()
===================================================
import { createAction } from "@reduxjs/toolkit"
export const addSuperPower =  createAction('superPowerAdded')
console.log(addSuperPower.type) //superPowerAdded
//usage
dispatch(addSuperPower({id:p.id,name:p.name}) //payload should be passed as an object

Create Reducers
---------------
see reducers.js
const reducer = (state = [], action) => { switch (action.type) { case actions.BUG_ADDED: return [ ...state, { id: ++lastId, //Payload should contain minimum information, we dont need id and resolved description: action.payload.description, resolved: false, }, ]; case actions.BUG_DELETED: return state.filter((bug) => bug.id !== action.payload.id); case actions.BUG_RESOLVED: return state.map((bug) => bug.id === action.payload.id ? { ...bug, resolved: true } : bug ); default: return state; } };

export default reducer;


Create Reducer using @redux/Toolkit-->createReducer()
=====================================================
//See createaction implementation above
import { createAction,createReducer } from "@reduxjs/toolkit"

//https://redux-toolkit.js.org/api/createReducer create reducer is deprecated 
https://stackoverflow.com/questions/77740027/getting-an-error-with-redux-toolkit-the-object-notation-for-createslice-extr

//NOTE: This style of reducer is been deprecated 
//@param1 is value of initial state which is []
//@param2 is an object with actions key=>value, event=>eventHandler
export default createReducer([],{
[addSuperPower.type] : (state,action){
//Here we can write mutating code because, internally redux/toolkit implements immer.js which is immutability library
state.push()
state[i] = 1000
}
})

NOTE: createReducer we can write mutating code because, internally redux/toolkit implements immer.js which is immutability library

In Latest Versions of Redux create Reducer is used with "Builder Callback"
==========================================================================
https://redux-toolkit.js.org/api/createReducer

import { createAction,createReducer } from "@reduxjs/toolkit"
export const addToCart = createAction('addToCart')//usage of action : addToCart({itemId:'',itemDesc:''}) 
const reducer = createReducer(preloadedState, builder => {
    //similar to switch-case
    builder.addCase(addToCart.type, (state, action) => {
        //https://stackoverflow.com/questions/64586207/redux-toolkit-state-showing-as-proxy-undefined-within-reducer
        //State here will give a proxy Object, because immer will wrap state inside proxy Object
        console.log(current(state)) //current() is used only for debugging purpose 
        const selectedItem = state.items.find(item => item.id === action.payload)
        console.log(selectedItem)
        state.addedItems = [...state.addedItems, selectedItem]
        // state.addedItems.push(selectedItem)
        //  addedItem = [...state.addedItem, selectedItem]
        //state.total = state.total + 1
    })
	// You can apply a "matcher function" to incoming actions
      .addMatcher(isActionWithNumberPayload, (state, action) => {})
      // and provide a default case if no other handlers matched
      .addDefaultCase((state, action) => {})
})

function isActionWithNumberPayload(action) {
  return typeof action.payload === 'number'
}

export default reducer


***createSlice(): import { createSlice } from "@reduxjs/toolkit"
==============================================================
https://redux-toolkit.js.org/api/createSlice

https://chanugatharindu1995.medium.com/make-api-call-in-react-redux-toolkit-react-redux-5cf999f2395c
What does createSlice do?
In short create slice creates needed actions and reducers in one go.
A function that accepts an initial state, an object of reducer functions, and a "slice name", and automatically generates action creators and action types that correspond to the reducers and state.

const slice = createSlice({
	name: 'bug',
	initialState:[],
	reducers: {
		bugAdded: (state,action) => {
		   //Can write mutating code here , uses Immer.js
		   state.push()
		   state[i] = 1000
		},
		bugResolved:() => {
		//Can write mutating code here , uses Immer.js
			state.push()
			state[i] = 1000
		}
	},
//This extraReducers is only for demo purposes	
//https://medium.com/@mindsurfingclub/redux-toolkit-extra-reducer-explained-createasyncthunk-1480c54e8b58
extraReducers: (builder) => {
   builder.addCase(fetchTodos.pending, (state, action) => {
    state.isLoading = true;
   })
   builder.addCase(fetchTodos.fulfilled, (state, action) => {
    state.isLoading = false;
    state.data = action.payload;
   })
   builder.addCase(fetchTodos.rejected, (state, action) => {
    state.isError = true;
   })
  }
})

const { reducer, actions } =  slice
export const {bugAdded, bugResolved} = actions
export default reducer

Real-Time example of a createSlice:
===================================
const { reducer, actions } = createSlice({
    name: 'cart',
    initialState: preloadedState,
    reducers: {
        addToCart: (state, action) => {
            console.log(current(state)) //current() is used only for debugging purpose 
            const selectedItem = state.items.find(item => item.id === action.payload)
            console.log(selectedItem)
            state.addedItems = [...state.addedItems, selectedItem]
            state.total = state.total + 1
        }
    }
})



Create store
----------
see store.js
Way 1:
=======
//Create store is a higher order function which takes in reducer, i.e function as an argument
import {createStore} from 'redux' import reducer from './reducer'
import {devToolsEnhancer} from 'redux-devtools-extension'
//Only reference of reducer should be passed 
//Preloadedstate is the default state that can be passed, its like schema
const store = createStore(reducer, 
						  [preloadedstate],
						  ***//window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() //To enable Redux dev tools 
						       devToolsEnhancer({trace: true}) //HOF, by default configures *** line and also give config options.		  
						  )
						  
export default store

Way 2: 
======
import { configureStore } from "@reduxjs/toolkit";
import rootReducer from "./rootReducer";
/*
    configureStore automatically sets up the Redux DevTools Extension for you, 
    automatically turns on the thunk middleware, and also makes it very easy to add additional store enhancers if desired.
*/
const store = configureStore({ reducer: rootReducer })
console.log(store.getState())
export default store 


What does the store object have 
console.log({store})
    see assets/store.jpg
    store:{
        dispatch: function,
        getState:function,
        subscribe:function,
        Symbol(observable): function,
        replaceReducer:function,
    }

If you see there is no direct way to access state .

dispatch actions
----------------
//see index.js
export const addBug = (description) => ({
  type: actions.BUG_ADDED,
  payload: { description },
});
store.dispatch(addBug('Bug1'))

and other examples

subscribe to store
------------------
We need to subscribe to store when we have to notify UI when there is change in the state .
this has to be performed before  dispatch. One subscribe is sufficent which will notify whenever there is channge.
syntax :
const unsubscribe = store.subscribe(()=>{
    console.log('state has changed,',store.getState())
})

subscribe takes a function argument , HOF

store.subscribe return refernce to unsubscribe method. When your component unmounts we need to use unsubscribe().

see index.js for example.

STORE in detail
================
consider store is 
{
categories:[], //Categories can have separate reducer.
products:[], //products can have separate reducer.
cart:[], // cart can have separate reducer .
user:[], // user can have separate reducer.
}

#region Selectors, Normalize data 

Which values shouldn't be saved in redux-store?
================================================
--> Form State:
	1) Form Values are temporary values , until the submit Clicked
	2) Too many dispatches will slow down your application , for eg dispatch on every keyStroke/keyPress
	3) Hard to debug the form state when saved to redux-store.
	

Selectors
=========
Selectors are functions that take state as parameter and return computed state.
const getUnResolvedBugs = (state) => state.entites.bugs.filter(bug => !bug.resolved)
Problem with this approach is 
const x = getUnresolvedBugs(store.getState())
const y = getUnresolvedBugs(store.getState())
console.log(x === y) // false, because filter method returns two different arrays .
//Which means unseolvedBugs are getting computed each time even when sate.entites.bugs is not been changeg
TO AVOID THIS WE HAVE TO USE "MEMOIZATION", there is a library called as reselect

npm i reselect

import {createSelector} from 'reselect'
export const getUnresolvedBugs = createSelector(
state=> state.entites.bugs,
state=>state.entites.projects
(bugs,projects)=> bugs.filter(bug=>!bug.resolved)
)
const x = getUnresolvedBugs(store.getState())
const y = getUnresolvedBugs(store.getState())
console.log(x === y) // true

Normalize Data 
===============
You can use a package called as npm i normalizr
//NOT NORMALIZED Data
[
	{ 
		id:1,
		project:{id:20, name:'xx'}
		
	},
	{
		id:1,
		project:{id:20, name:'xx'}
		
	}
]	

//Normalized Data 
[
	{
		id:1,
		projectId:20
		
	},
	{
		id:1,
		projectId:20
		
	}
]

#endregion Selectors, Normalize data 

#region Middlewares 

What are Middlewares?
Redux Middleware allows you to intercept every action sent to the reducer so you can make changes to the action or cancel the action.
Middleware helps you in executing side effects like logging error reporting, analytics, async requests


Step 1: Write a middleware 
---------------------------
//SNA => like DNA
export const loggerMiddleware = store => next=>action=>{
console.log(store) // {getState, reducer}
console.log(next)
console.log(action)// {type:'blahblah',payload:{xxxxxx}}
next(action) //IMPORTANT TO CALL FOR FURTHER EXECUTION, PASS action TO NEXT MIDDLEWARE
}

Step 2: Register middleware with store
--------------------------------------
import from '@redux/toolkit'
configureStore({
reducers,
middlewares:[loggerMiddleware]
})

//If you are not using toolkit then 
import {createstore, applyMiddleware} from 'redux'
createStore(reducers, applyMiddleware(loggerMiddleware,mw2,mw3......))

How do you pass Parameters to middlewares 
-----------------------------------------
import from '@redux/toolkit'
configureStore({
reducers,
middlewares:[loggerMiddleware(params)] //mw with params
})

export const loggerMiddleware = params => store => next=>action=>{ //this is currying, params is another parameter added
console.log(params)
console.log(store) // {getState, reducer}
console.log(next)
console.log(action)// {type:'blahblah',payload:{xxxxxx}}
next() //IMPORTANT TO CALL FOR FURTHER EXECUTION
}


#region Async/Promises with middleware


https://redux.js.org/tutorials/essentials/part-5-async-logic
There is another modern-day-approach called RTK query 

Scenario 1: Consider an action with empty object like below 
export const addSuperPower = (id, name) => {
    return {} //NO TYPE PROPERTY 
}
Error :  Actions may not have an undefined "type" property. Have you misspelled a constant?

Scenario 2: Consider an action returning a function :
dispatch(()=>{})
Error: Actions must be plain objects, Use custom Middleware for async actions.

So to avoid this we can make use of middlewares 
 Example middle ware 
 //THIS IS CALLED AS THUNK
export default func = params=>store=>next=>action {
 if(action ===function){
	action(store.dispatch, store.getState)
 }else{
	next(action)
 }
}


What are Thunks?
https://www.freecodecamp.org/news/redux-thunk-explained-with-examples/
Redux Thunk is middleware that allows you to return functions, rather than just actions, within Redux. 
This allows for delayed actions, including working with promises.
One of the main use cases for this middleware is for handling actions that might not be synchronous, for example, using axios to send a GET request. Redux Thunk allows us to dispatch those actions asynchronously and resolve each promise that gets returned.
Install Redux Thunk can be installed by running npm install redux-thunk --save

WAY 1: To apply "thunk" w.r.t create store we will have to configure as follows :
import { createStore, applyMiddleware } from 'redux';
import thunk from 'redux-thunk';
import rootReducer from './reducers/index';

const store = createStore(
  rootReducer,
  applyMiddleware(thunk)
);

WAY 2: @redux/toolkit have already implemented this for you 
import { configureStore, getDefaultMiddleware } from "@reduxjs/toolkit";
import rootReducer from "./rootReducer";
/*
    configureStore automatically sets up the Redux DevTools Extension for you, 
    automatically turns on the thunk middleware, and also makes it very easy to add additional store enhancers if desired.
*/
configureStore({
reducers,
middlewares:(getDefaultMiddleware)=> ([...getDefaultMiddleware(), loggerMiddleware])
})
An enhancer which logs the time taken for the reducers to process each action




#region Calling API's using Middlewares 

consider an action:
====================
const getApiCall = () => ({
type:'apiGetCall',
payload:{
	url: 'dummy/url/fragment',
	payload:{
		id:100,
		onSuccess:'successActionType',
		onError:'errorActionType'
	}

}
})

//dispatch
store.dispatch(getApiCall())

//Thunk/Middleware 
const apiMiddleware = params =>  store => next=> async action => {
	if(action.type !== 'apiGetCall'){
		return next(action)
	}
	
	next(action) //apiGetCall will appear in redux-dev-tools , if we skip there will be no action registered.
	const {url, id,onSuccess,onError} =  action.payload
	
	try{
		const fetchResponse = await fetch(url)
		const response = await fetchResponse.json()
		store.dispatch({type:onSuccess, payload:{response})
	}
	catch(error){
		store.dispatch({type:onError, payload:{error})
	}
}

//Refactored Middleware/Thunk
//In actionsCreator file
const apiGetCall = createAction('api/getCall')
const apiSuccessCall = createAction('api/successCall')
const apiErrorCall = createAction('api/errorCall')

//We can trigger action like below.
store.dispatch(actionCreator.apiGetCall({
		id:100,
		}))

const apiMiddleware = params =>  store => next=> async action => {
	if(action.type !== apiGetCall.type){ //changed here 
		return next(action)
	}
	
	next(action) //apiGetCall will appear in redux-dev-tools , if we skip there will be no action registered.
	const {url, id,onSuccess,onError} =  action.payload
	
	try{
		const fetchResponse = await fetch(url)
		const response = await fetchResponse.json()
		//For generic success we can make use of this 
		store.dispatch(apiSuccessCall(response.data))
		//Specific 
		if(onSuccess){
			store.dispatch({type:onSuccess, payload:{response})
		}
	}
	catch(error){
	//For generic errors we can make use of this 
		store.dispatch(apiErrorCall(error))
		//Specific
	  if(onError){
		store.dispatch({type:onError, payload:{error})
	  }
	}
}


#region MODERN WAY OF CALLING APIS as of Redux Version 5
=================================================
Refer epampdp --> C:\Ajay_EPAM\PDP_PRACTICSE\epampdp\REACT\redux_example_apps\crudredux

//INSIDE STORE.JS
#region Store
import { configureStore } from "@reduxjs/toolkit";
import reducer from "./reducer";
const store = configureStore({
    reducer
})

export default store

#endregion store

#region Reducer
//INSIDE REDUCER.JS
//Example Reference: https://dev.to/julfikarhaidar/redux-toolkit-crud-example-with-react-hooks-4d98

//import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { buildCreateSlice, asyncThunkCreator } from '@reduxjs/toolkit'

/*
    When you use createSlice  we see following error:
    Cannot use `create.asyncThunk` in the built-in `createSlice`. 
    Use `buildCreateSlice({ creators: { asyncThunk: asyncThunkCreator } })` to create a customised version of `createSlice`.

    To avoid that we make use of 
    export const createProductsSlice = buildCreateSlice({
    creators: { asyncThunk: asyncThunkCreator },
    })
*/


export const createProductsSlice = buildCreateSlice({
    creators: { asyncThunk: asyncThunkCreator },
})

const slice = createProductsSlice({       //createSlice({
    name: 'products',
    initialState: {
        products: [],
        error: "",
        loading: false,
        selectedProductDetail: {}
    },
    reducers: (create) => ({
        fetchAllProducts: create.asyncThunk(
            async (obj1, obj2) => {
                console.log({ obj1 }, { obj2 })
                const productsPromise = await fetch('https://dummyjson.com/products')
                const productsResponse = await productsPromise.json()
                return productsResponse.products //this will be saved as action.payload 
            },
            {
                pending: (state) => {
                    state.loading = true
                },
                rejected: (state, _action) => {
                    state.loading = false
                },
                fulfilled: (state, action) => {
                    state.products = [...action.payload]
                }
            }
        ),

        fetchProductById: create.asyncThunk(
            async (product) => {
                const id = product.id
                const productsPromise = await fetch(`https://dummyjson.com/products/${id}`)
                const productsResponse = await productsPromise.json()
                return productsResponse
            },
            {
                pending: (state) => {
                    state.loading = true
                },
                rejected: (state, _action) => {
                    state.loading = false
                },
                fulfilled: (state, action) => {
                    state.selectedProductDetail = { ...action.payload }
                }
            }
        )
    })
    // Old Way, there is also ancientway  using speciffic middleware THE STORE=>NEXT=>ACTION way
    
    // reducers: {
    //     loadProducts: (state, action) => {
    //         state.currentPage = action.payload;
    //     },
    // },
    // extraReducers: {
    //     [fetchAllProducts.pending]: (state, action) => {
    //         state.loading = true
    //     },
    //     [fetchAllProducts.fulfilled]: (state, action) => {
    //         state.loading = false
    //         state.products = [action.payload]
    //     },
    //     [fetchAllProducts.rejected]: (state, action) => {
    //         state.loading = false
    //         state.error = action.payload.message
    //     }
    // }
    
})


const { reducer, actions } = slice

console.log(actions)

export const { fetchAllProducts, fetchProductById } = actions

export default reducer
#endregion reducer

#region React Component UI 
import { useEffect, useState } from "react"
import { useDispatch, useSelector } from "react-redux"
import { fetchAllProducts, fetchProductById } from "../crud-store/reducer"

const App = () => {
    const products = useSelector(state => state.products)
    const selectedProductDetail = useSelector(state => state.selectedProductDetail)
    const [isShowDetail, setIsShowDetail] = useState(false)
    const dispatch = useDispatch()

    useEffect(() => {
        dispatch(fetchAllProducts())
    }, [])

    const handleShowDetailsClick = (product) => {
        dispatch(fetchProductById(product))
        setIsShowDetail(true)
    }

    return (
        <div>
            {isShowDetail && <div>
                {JSON.stringify(selectedProductDetail)}
                <br></br>
                <button onClick={() => setIsShowDetail(false)}>Hide Details</button>
            </div>}
            <div>
                <ul>
                    {products.map(product => {
                        return <li>
                            <p><b>{product.title} {",  "} Rs.{product.price}</b></p>
                            <p>{product.description}</p>
                            <button onClick={() => handleShowDetailsClick(product)}>Show Details</button>
                            <hr />
                        </li>
                    })}
                </ul>
            </div>

        </div>
    )
}

export default App


#endregion React Component UI 

#endregion MODERN WAY OF CALLING APIS as of Redux Version 5

#endregion Calling API's using Middlewares 

#endregion Async/Promises with middleware

#endregion Middlewares 

#region Connect Component to Redux

Connect your UI component to Redux store
=========================================
Step 1: Wrap your <App/> inside <Provider>
===========================================
Way 1:
//Inside context.JS
const StoreContext = React.createContext()
export default StoreContext

//In index.JS
const store = createStore()
<StoreContext.Provider value={store} > <App/> </StoreContext.Provider>

//Inside a UI React Component
class SomeXyz{
 static contextType = StoreContext
 componentDidMount(){
	const store = this.context
	this.unsubscribe = store.subscribe(() => {this.setState({....})})....
 }
 componentWillUnMount(){
	this.unsubscribe()
 }
}

Way 2: npm i react-redux
========================
import {Provider, connect} from 'react-redux'
<Provider value={store} > <App/> </Provider>
This Provider will take care of subscribing and Unsubscriping of events 
The store-state is passed on as props using connect, mapStateToProps, mapDispatchToProps




Way 1 : using CLASS Components 
===================================
import { connect } from "react-redux";

//Inside DefaultCharactersClass
//This comes from mapDispatchToProps
 handleClick(character) {  this.props.addSuperPower(character)  }
  const { characters } = this.props //this comses from mapStateToProps

const mapStateToProps = (state) => {  return { characters: state.defaultCharacters } }

const mapDispatchToProps = (dispatch) => {     return {
        addSuperPower: (character) => dispatch(addSuperPower(character.id, character.name))
    }
}
//connect HOC takes two functions as parameters 
export default connect(mapStateToProps, mapDispatchToProps)(DefaultCharactersClass)


WAY 2: using Functional components : connect() function is not required in Funct.Comp 
======================================================================================
import { useDispatch, useSelector } from "react-redux"

//Inside functional components ,
const characters = useSelector(state => state.defaultCharacters)
    const dispatch = useDispatch()
    const selectedCharacters = useSelector(state => state.selectedCharacters)

    // console.log(characters)

    const handleClick = (character) => {
        //console.log('Add Clicked', character)
        dispatch(addSuperPower(character.id, character.name)) // call this function
    }



	


#endregion Connect Component to Redux 

#region Redux Patterns

Redux is a highly flexible state management library for JavaScript applications, and there are numerous ways to structure a Redux software project. Here are a few common Redux patterns you might come across:

DUCKS Pattern: The Ducks pattern proposes to group the action constants, action creators, and reducers all in the same file, instead of separating them into different directories. This can make the codebase easier to maintain.

Domain-style Structure: This involves organizing actions, reducers, and selectors together based on the feature or domain rather than the type of Redux logic.

Normalized State Shape: This pattern involves designing the redux state in a way that mimics a database table where each entry has unique ID and other entries reference these IDs, instead of nested structures. This makes operations like caching, querying, and updating easier.

Re-ducks Pattern: An evolution of the Ducks pattern, Re-ducks separates operations, actions, and reducers into different files but keeps them in same module folder, enhancing scalability.

Smart and Dumb Components Pattern (or Container/Component pattern): In this pattern, components are divided into two categories: smart components (connected to Redux) and dumb components (not connected to Redux).

Slice Reducers pattern: In this pattern, reducers are organized into slices, each dealing with a separate and isolated part of the state.

Async Actions pattern: This involves using middleware (like redux-thunk or redux-saga) to manage asynchronous actions in a Redux application. Actions to start the async request, actions to handle success, and action to handle failure are all dispatched.

Selectors pattern: Selectors are used to compute derived data from Redux store, and encapsulate the state shape from the rest of the application.

Remember, these are not strictly rules but guidelines, and their adoption depends on the requirements and complexity of the application being built.

#endregion Redux Patterns

#region Learn about Redux Saga Basics(alternate to Thunk)

#endregion Redux Sagas Basics(alternate to Thunk)

https://medium.com/@ayabellazreg/make-a-simple-shopping-cart-app-using-react-redux-1-3-fefde93e80c7
https://medium.com/@ayabellazreg/make-a-simple-shopping-cart-app-using-react-redux-part-3-32b182e02cc9

#region Redux Toolkit Query

https://www.youtube.com/playlist?list=PL0Zuz27SZ-6M1J5I1w2-uZx36Qp6qhjKo
See Example : C:\Ajay_EPAM\PDP_PRACTICSE\epampdp\REACT\redux-tookit-query\src\api\todoApiSlice.ts

#endregion Redux Toolkit Query

Flux Standard Action:

Feedback on following Question

https://borstch.com/blog/development/managing-concurrent-tasks-with-racing-effects-in-redux-saga
https://medium.com/dailyjs/handling-race-conditions-with-redux-thunk-c348a7a5a839


Question: You have some dispatch action, you're doing from one component, there are multiple users with the same thing at the same point of time, how you are going to maintain the state situations?

// How to handle inconsistencies ?
When multiple users are interacting with the data at the same time, ideally the Redux state should be updated frequently to reflect the latest state of the application.

There are two main methods to handle these inconsistencies:

Optimistic Updates: Here the UI responds as if the server has completed the request successfully without waiting. It predicts what the server response will be. If the request fails, the state will then be corrected. Facebook comments use optimistic updates.

// Dispatch action to optimistically update UI
dispatch({ type: 'UPDATE_START', payload: { id: 1, data: 'new data'} });
fetch('https://api.example.com/data', {
  method: 'POST',
  body: JSON.stringify({ id: 1, data: 'new data' })
  })
  .then(() => {
    // Successful, so no need to do anything
  })
  .catch(error => {
    // Handle error, we might roll back the changes in UI
    dispatch({ type: 'UPDATE_ERROR', error, payload: { id: 1, oldData: 'old data' } });
  });

Pessimistic Updates: In this case, the UI doesn’t update the state until the server has response. This ensures the consistent state before and after the server call.
Example : 
// Dispatch action to start loading - show spinner
dispatch({ type: 'LOADING_START' });

fetch('https://api.example.com/data')
  .then(response => {
    // Response received, stop loading and update state
    dispatch({ type: 'LOADING_SUCCESS', payload: response.data });
  })
  .catch(error => {
    // There's an error, stop loading and show an error message
    dispatch({ type: 'LOADING_ERROR', error });
  });
  
 

Also, consider threading: when two different clients are trying to update the same piece of information, the last update might overwrite the first without knowing what the first user did. This can be avoided as follows:

Locking: The simplest and most direct solution is to lock the state when a user is updating it. This means that other users have to wait for the first user to finish their changes and release the lock before they can make their changes.

// Action to request edit.
const requestEditUser = (id) => ({
  type: 'REQUEST_EDIT_USER',
  id,
});

// Action to release edit.
const releaseEditUser = (id) => ({
  type: 'RELEASE_EDIT_USER',
  id,
});

// Action to update user.
const updateUser = (id, updates) => ({
  type: 'UPDATE_USER',
  id,
  updates,
  
});

const userReducer = (state = initialState, action) => {
  switch (action.type) {
    case 'REQUEST_EDIT_USER':
      return {
        ...state,
        users: state.users.map(user => 
          user.id === action.id ? { ...user, isEditing: true } : user
        ),
      };
    case 'RELEASE_EDIT_USER':
      return {
        ...state,
        users: state.users.map(user => 
          user.id === action.id ? { ...user, isEditing: false } : user
        ),
      };
    default:
      return state;
  }
};

This ensures that users would first need to dispatch a requestEditUser action and then check if isEditing is false before they are able to edit the user. If isEditing is true, the user is locked for editing.

Transaction: Another solution is to use transactions. When a user begins editing the data, a transaction is created. The middleware ensures that all actions in a transaction are completed before allowing a new transaction to start.

const startTransaction = (actions) => ({
  type: 'START_TRANSACTION',
  payload: actions,
});

const commitTransaction = () => ({
  type: 'COMMIT_TRANSACTION',
});

const abortTransaction = () => ({
  type: 'ABORT_TRANSACTION',
});
  
- When `startTransaction` is dispatched, the actions in the payload are staged for changes and no updates to the state are applied yet.
- Then, `commitTransaction` is dispatched. Only at this point are the changes applied to the state.
- If there's a conflict or any issue with any action, `abortTransaction` is dispatched and all the staged changes are discarded.

Note that these are highly simplified examples that do not handle all edge cases or potential issues. For comprehensive solutions, consider using frameworks such as Loopback and libraries like `sequelize` for handling transactions and optimistic locking.



Exploring adding a real-time backend to your Redux app would also be beneficial, as changes in real time help reduce conflict.

Implementing these strategies can help manage and maintain state, preventing conflicts or inconsistencies.

#endregion
